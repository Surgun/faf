{"version":3,"sources":["../../src/js/mobs.js"],"names":["MobManager","monsterDB","activeMobs","idCount","addMob","mob","push","unitType","idToMob","id","find","generateDungeonMob","mobID","difficulty","multiplier","disableEventLayers","mobTemplate","m","Mob","getUniqueID","generateDungeonFloor","floor","floorNum","bossMultiplier","mobFloor","mobs","forEach","MonsterHall","findMonster","allMobDropsByDungeon","dungeonID","floors","FloorManager","floorsByDungeon","materials","map","f","mat","Set","MobTemplate","props","Object","assign","image","head","hpFloor","event","DungeonManager","getHpFloor","hpMod","powFloor","getPowFloor","powMod","skill1","skill2","skill3","skill4","SkillManager","idToSkill","icon","FloorTemplate","addFloor","floorByID","getFloor","dungeon","possibleFloors","filter","minFloor","maxFloor","rand","DungeonSeedManager","getFloorSeed","Math","length","mobsByDungeon","dungeonid","flattenArray","mobsByDungeons","dungeonArray","includes","dungeonNameByMob","uniqueDungeons","dungeonByID","name","floorRangeByMob","min","max","rewards","floorID","idAmt","material","amt","lvl","pow","miscLoadedValues","hpmax","hp","uniqueid","playbook","PlaybookManager","generatePlayBookFromSkills","passive","passiveSkill","save","buffs","buff","createSave","state","undefined","newBuff","BuffManager","generateSaveBuff","power","loadSave","adjustState","Combatant","$","html"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst MobManager = {\r\n    monsterDB : [],\r\n    activeMobs : [],\r\n    idCount : 0,\r\n    addMob(mob) {\r\n        this.monsterDB.push(mob);\r\n        this.unitType = \"mob\";\r\n    },\r\n    idToMob(id) {\r\n        return this.monsterDB.find(mob => mob.id === id);\r\n    },\r\n    generateDungeonMob(mobID, difficulty,multiplier) {\r\n        disableEventLayers();\r\n        const mobTemplate = this.monsterDB.find(m=>m.id === mobID);\r\n        const mob = new Mob(difficulty, mobTemplate, multiplier);\r\n        return mob;\r\n    },\r\n    getUniqueID() {\r\n        this.idCount += 1;\r\n        return this.idCount;\r\n    },\r\n    generateDungeonFloor(floor,floorNum,bossMultiplier) {\r\n        const mobFloor = [];\r\n        floor.mobs.forEach(mob => {\r\n            mobFloor.push(this.generateDungeonMob(mob,floorNum,bossMultiplier));\r\n            MonsterHall.findMonster(mob);\r\n        })\r\n        return mobFloor;\r\n    },\r\n    allMobDropsByDungeon(dungeonID) {\r\n        const floors = FloorManager.floorsByDungeon(dungeonID);\r\n        const materials = floors.map(f=>f.mat);\r\n        return [...new Set(materials)];\r\n    }\r\n}\r\n\r\nclass MobTemplate {\r\n    constructor (props) {\r\n        Object.assign(this, props);\r\n        this.image = '<img src=\"/assets/images/enemies/' + this.id + '.gif\">';\r\n        this.head = '<img src=\"/assets/images/enemies/heads/' + this.id + '.png\">';\r\n    }\r\n    //used in the monster hall\r\n    getHPForFloor(floor) {\r\n        const hpFloor = this.event === \"normal\" ? DungeonManager.getHpFloor(floor) : 1;\r\n        return this.hpMod * hpFloor;\r\n    }\r\n    getPOWForFloor(floor) {\r\n        const powFloor = this.event === \"normal\" ? DungeonManager.getPowFloor(floor) : 1;\r\n        return this.powMod * powFloor;\r\n    }\r\n    getSkillIDs() {\r\n        return [this.skill1,this.skill2,this.skill3,this.skill4];\r\n    }\r\n    getSkillIcons() {\r\n        return [SkillManager.idToSkill(this.skill1).icon,SkillManager.idToSkill(this.skill2).icon,SkillManager.idToSkill(this.skill3).icon,SkillManager.idToSkill(this.skill4).icon];\r\n    }\r\n}\r\n\r\nclass FloorTemplate {\r\n    constructor (props) {\r\n        Object.assign(this, props);\r\n    }\r\n}\r\n\r\nconst FloorManager = {\r\n    floors : [],\r\n    addFloor(floor) {\r\n        this.floors.push(floor);\r\n    },\r\n    floorByID(id) {\r\n        return this.floors.find(f=>f.id === id);\r\n    },\r\n    getFloor(dungeon,floor) {\r\n        const possibleFloors = this.floors.filter(f => f.dungeon === dungeon && f.minFloor <= floor && f.maxFloor >= floor);\r\n        const rand = DungeonSeedManager.getFloorSeed(dungeon,floor);\r\n        return possibleFloors[Math.floor(rand*possibleFloors.length)];\r\n    },\r\n    mobsByDungeon(dungeonid) {\r\n        const floors = this.floors.filter(f=>f.dungeon === dungeonid);\r\n        const mobs = flattenArray(floors.map(f => f.mobs));\r\n        return [...new Set(mobs)]; \r\n    },\r\n    mobsByDungeons(dungeonArray) {\r\n        const floors = this.floors.filter(f=>dungeonArray.includes(f.dungeon));\r\n        const mobs = flattenArray(floors.map(f => f.mobs));\r\n        return [...new Set(mobs)]; \r\n    },\r\n    dungeonNameByMob(mobID) {\r\n        const floors = this.floors.filter(f=>f.mobs.includes(mobID));\r\n        const uniqueDungeons = [...new Set(floors.map(f=>f.dungeon))];\r\n        return DungeonManager.dungeonByID(uniqueDungeons[0]).name;\r\n    },\r\n    floorRangeByMob(mobID) {\r\n        const floors = this.floors.filter(f=>f.mobs.includes(mobID));\r\n        const maxFloor = floors.map(f=>f.maxFloor);\r\n        const minFloor = floors.map(f=>f.minFloor);\r\n        return {\"min\":Math.min(...minFloor),\"max\":Math.max(...maxFloor)};\r\n    },\r\n    floorsByDungeon(dungeonID) {\r\n        return this.floors.filter(f=>f.dungeon === dungeonID); \r\n    },\r\n    rewards(floorID) {\r\n        const floor = this.floorByID(floorID);\r\n        return new idAmt(floor.material,floor.amt);\r\n    }\r\n}\r\n\r\nclass Mob extends Combatant {\r\n    constructor (lvl, mobTemplate, difficulty=0) {\r\n        super(mobTemplate);\r\n        this.lvl = lvl;\r\n        this.difficulty = difficulty;\r\n        const powFloor = mobTemplate.event === \"normal\" ? DungeonManager.getPowFloor(lvl) : 1;\r\n        const hpFloor = mobTemplate.event === \"normal\" ? DungeonManager.getHpFloor(lvl) : 1;\r\n        this.pow = Math.floor(powFloor*this.powMod*Math.pow(miscLoadedValues.bossMultiplier,difficulty));\r\n        this.hpmax = Math.floor(hpFloor*this.hpMod*Math.pow(miscLoadedValues.bossMultiplier,difficulty));\r\n        this.hp = this.hpmax;\r\n        this.uniqueid = MobManager.getUniqueID();\r\n        this.playbook = PlaybookManager.generatePlayBookFromSkills(this.skill1,this.skill2,this.skill3,this.skill4);\r\n        this.passive = SkillManager.idToSkill(this.passiveSkill);\r\n    }\r\n    createSave() {\r\n        const save = {};\r\n        save.lvl = this.lvl;\r\n        save.id = this.id;\r\n        save.uniqueid = this.uniqueid;\r\n        save.hp = this.hp;\r\n        save.difficulty = this.difficulty;\r\n        save.buffs = [];\r\n        this.buffs.forEach(buff => {\r\n            save.buffs.push(buff.createSave());\r\n        });\r\n        save.state = this.state; \r\n        return save;\r\n    }\r\n    loadSave(save) {\r\n        this.hp = save.hp;\r\n        this.uniqueid = save.uniqueid;\r\n        if (save.buffs !== undefined) {\r\n            save.buffs.forEach(buff => {\r\n                const newBuff = BuffManager.generateSaveBuff(buff.id,this,buff.power);\r\n                newBuff.loadSave(buff);\r\n                this.buffs.push(newBuff);\r\n            });\r\n        }\r\n        this.state = save.state;\r\n        adjustState(this);\r\n    }\r\n}\r\n\r\nfunction adjustState(mob) {\r\n    if (mob.state === \"egg\") {\r\n        mob.image = '<img src=\"/assets/images/enemies/B902A.gif\">';\r\n        $(\"#mobImage\"+mob.uniqueid).html(mob.image);\r\n        mob.playbook = PlaybookManager.generatePlayBookFromSkills(\"SM902A\",\"SM902A\",\"SM902A\",\"SM902B\");\r\n    }\r\n}"],"file":"mobs.js"}