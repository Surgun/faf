{"version":3,"sources":["../../src/js/combat.js"],"names":["TargetType","Object","freeze","FIRST","SECOND","THIRD","FOURTH","RANDOM","SELF","ALLENEMIES","ALLALLIES","CombatManager","refreshLater","nextTurn","dungeon","attacker","order","allies","unitType","party","heroes","mobs","enemies","attack","getSkill","combatParams","combatRoundParams","id","execute","nextPosition","combatRound","SkillManager","skillEffects","buffTick","dungeonid","power","Math","floor","getPow","powMod","getTech","techMod","target","livingAllies","filter","h","alive","livingEnemies","length","random","$drLog","$","BattleLog","log","addEntry","icon","m","DungeonManager","dungeonView","shift","push","refresh","clear","empty","forEach","d","addClass","html","prepend","Combatant","props","assign","hp","critDmg","buffs","state","type","buff","expired","passiveSkill","idToSkill","passiveCheck","battleText","reducedDmg","getProtection","miscIcons","takeDamage","name","max","refreshHPBar","dead","dmg","buffID","some","b","find","hasBuff","getBuff","stacks","min","maxHP","pow","getBuffPower","protection","getBuffProtection","hpmax","getBuffMaxHP","hpPercent","playbook","reset","nextSkill","skillCount","getSkillIcons","getSkillIDs","map","reduce","a","BuffRefreshManager","removeBuff","isChilled"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst TargetType = Object.freeze({FIRST:0,SECOND:1,THIRD:2,FOURTH:3,RANDOM:4,SELF:5,ALLENEMIES:6,ALLALLIES:7});\r\n\r\nconst CombatManager = {\r\n    refreshLater : false,\r\n    nextTurn(dungeon) {\r\n        const attacker = dungeon.order.nextTurn();\r\n        const allies = (attacker.unitType === \"hero\") ? dungeon.party.heroes : dungeon.mobs;\r\n        const enemies = (attacker.unitType === \"hero\") ? dungeon.mobs : dungeon.party.heroes;\r\n        const attack = attacker.getSkill();\r\n        const combatParams = new combatRoundParams(attacker,allies,enemies,attack,dungeon.id);\r\n        this.execute(combatParams);\r\n        dungeon.order.nextPosition();\r\n    },\r\n    execute(combatRound) {\r\n        SkillManager.skillEffects[combatRound.attack.id](combatRound);\r\n        combatRound.attacker.buffTick(\"onHitting\");\r\n    }\r\n}\r\n\r\nclass combatRoundParams {\r\n    constructor (attacker,allies,enemies,attack,dungeonid) {\r\n        this.attacker = attacker;\r\n        this.allies = allies;\r\n        this.enemies = enemies;\r\n        this.attack = attack;\r\n        this.power = Math.floor(this.attacker.getPow() * this.attack.powMod + this.attacker.getTech() * this.attack.techMod);\r\n        this.dungeonid = dungeonid;\r\n    }\r\n    getTarget(target) {\r\n        const livingAllies = this.allies.filter(h=>h.alive());\r\n        const livingEnemies = this.enemies.filter(h=>h.alive());\r\n        if (target === TargetType.FIRST) return [livingEnemies[0]];\r\n        if (target === TargetType.SECOND) {\r\n            if (livingEnemies.length === 1) return [livingEnemies[0]];\r\n            return [livingEnemies[1]];\r\n        }\r\n        if (target === TargetType.THIRD) {\r\n            if (livingEnemies.length === 1) return [livingEnemies[0]];\r\n            if (livingEnemies.length === 2) return [livingEnemies[1]];\r\n            return [livingEnemies[3]];\r\n        }\r\n        if (target === TargetType.FOURTH) return [livingEnemies[livingEnemies.length-1]];\r\n        if (target === TargetType.RANDOM) return [livingEnemies[Math.floor(Math.random()*livingEnemies.length)]];\r\n        if (target === TargetType.SELF) return [this.attacker];\r\n        if (target === TargetType.ALLENEMIES) return livingEnemies;\r\n        if (target === TargetType.ALLALLIES) return livingAllies;\r\n    }\r\n}\r\n\r\nconst $drLog = $(\"#drLog\");\r\n\r\nconst BattleLog = {\r\n    log : [],\r\n    addEntry(dungeonid,icon,m) {\r\n        if (dungeonid !== DungeonManager.dungeonView) return;\r\n        if (this.log.length >= 25) {\r\n            this.log.shift();\r\n        }\r\n        this.log.push(`${icon}&nbsp;&nbsp;${m}`);\r\n        if (CombatManager.refreshLater) return;\r\n        this.refresh();\r\n    },\r\n    clear() {\r\n        this.log = [];\r\n        $drLog.empty();\r\n    },\r\n    refresh() {\r\n        $drLog.empty();\r\n        this.log.forEach(m=> {\r\n            const d = $(\"<div/>\").addClass(\"battleLog\").html(m);\r\n            $drLog.prepend(d);\r\n        });\r\n    },\r\n}\r\n\r\nclass Combatant {\r\n    constructor (props) {\r\n        Object.assign(this,props);\r\n        this.hp = 1;\r\n        this.critDmg = 1.5;\r\n        this.buffs = [];\r\n        this.state = null;\r\n    }\r\n    buffTick(type) {\r\n        this.buffs.forEach(buff => {\r\n            buff.buffTick(type);\r\n        });\r\n        this.buffs = this.buffs.filter(buff => !buff.expired());\r\n    }\r\n    passiveCheck(type) {\r\n        if (this.passiveSkill === null) return;\r\n        SkillManager.idToSkill(this.passiveSkill).passiveCheck(type,this);\r\n    }\r\n    takeAttack(attack) {\r\n        battleText(attack,this);\r\n        const reducedDmg = Math.floor(attack.power * this.getProtection());\r\n        BattleLog.addEntry(attack.dungeonid,miscIcons.takeDamage,`${this.name} takes ${reducedDmg} damage`);\r\n        this.hp = Math.max(this.hp-reducedDmg,0);\r\n        refreshHPBar(this);\r\n        if (this.hp === 0) BattleLog.addEntry(attack.dungeonid,miscIcons.dead,`${this.name} has fallen!`);\r\n        this.buffTick(\"onHit\");\r\n    }\r\n    takeDamage(dmg) {\r\n        this.hp = Math.max(this.hp-dmg,0);\r\n        refreshHPBar(this);\r\n    }\r\n    hasBuff(buffID) {\r\n        return this.buffs.some(b => b.id === buffID);\r\n    }\r\n    getBuff(buffID) {\r\n        return this.buffs.find(b => b.id === buffID);\r\n    }\r\n    getBuffStacks(buffID) {\r\n        if (!this.hasBuff(buffID)) return 0;\r\n        return this.getBuff(buffID).stacks;\r\n    }\r\n    addBuff(buff) {\r\n        this.buffs.push(buff);\r\n        this.hp = Math.min(this.hp,this.maxHP());\r\n    }\r\n    removeBuff(buffID) {\r\n        this.buffs = this.buffs.filter(b=>b.id !== buffID);\r\n    }\r\n    getPow() {\r\n        return this.pow + this.getBuffPower();\r\n    }\r\n    getTech() {\r\n        return 0;\r\n    }\r\n    getProtection() {\r\n        return 1 - (this.protection + this.getBuffProtection());\r\n    }\r\n    getAdjPow() {\r\n        return this.getPow();\r\n    }\r\n    dead() {\r\n        return this.hp <= 0;\r\n    }\r\n    alive() {\r\n        return this.hp > 0;\r\n    }\r\n    maxHP() {\r\n        return this.hpmax + this.getBuffMaxHP();\r\n    }\r\n    missingHP() {\r\n        return this.maxHP()-this.hp;\r\n    }\r\n    heal(hp) {\r\n        if (this.hp === 0) return;\r\n        this.hp = Math.min(this.hp+hp,this.maxHP());\r\n        if (!CombatManager.refreshLater) refreshHPBar(this);\r\n    }\r\n    healPercent(hpPercent) {\r\n        if (this.hp === 0) return;\r\n        this.hp += Math.floor(this.maxHP()*hpPercent/100);\r\n        this.hp = Math.min(this.maxHP(),this.hp);\r\n        if (!CombatManager.refreshLater) refreshHPBar(this);\r\n    }\r\n    resetPlaybookPosition() {\r\n        this.playbook.reset();\r\n    }\r\n    getSkill() {\r\n        return this.playbook.nextSkill();\r\n    }\r\n    getActiveSkill() {\r\n        return this.playbook.skillCount();\r\n    }\r\n    getSkillIcons() {\r\n        return this.playbook.getSkillIcons();\r\n    }\r\n    getSkillIDs() {\r\n        return this.playbook.getSkillIDs();\r\n    }\r\n    getBuffProtection() {\r\n        const buffs = this.buffs.map(b=>b.getProtection());\r\n        return buffs.reduce((a,b) => a+b, 0);\r\n    }\r\n    getBuffPower() {\r\n        const buffs = this.buffs.map(b=>b.getPow());\r\n        return buffs.reduce((a,b) => a+b, 0);\r\n    }\r\n    getBuffTech() {\r\n        const buffs = this.buffs.map(b=>b.getTech());\r\n        return buffs.reduce((a,b) => a+b, 0);\r\n    }\r\n    getBuffMaxHP() {\r\n        const buffs = this.buffs.map(b=>b.maxHP());\r\n        return buffs.reduce((a,b) => a+b, 0);\r\n    }\r\n    buffCount() {\r\n        return this.buffs.length;\r\n    }\r\n    debuffCount() {\r\n        return this.buffs.filter(b => b.type === \"debuff\").length;\r\n    }\r\n    removeBuffs() {\r\n        this.buffs.forEach(buff => {\r\n            BuffRefreshManager.removeBuff(buff,this);\r\n        });\r\n        this.buffs = [];\r\n        this.hp = Math.min(this.hp,this.maxHP());\r\n    }\r\n    removeDebuffs() {\r\n        this.buffs.forEach(buff => {\r\n            if (buff.type === \"debuff\") BuffRefreshManager.removeBuff(buff,this);\r\n        });\r\n        this.buffs = this.buffs.filter(b => b.type !== \"debuff\");\r\n        this.hp = Math.min(this.hp,this.maxHP());\r\n    }\r\n    isChilled() {\r\n        return this.buffs.some(b=>b.isChilled());\r\n    }\r\n}\r\n\r\n"],"file":"combat.js"}