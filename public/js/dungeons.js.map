{"version":3,"sources":["../../src/js/dungeons.js"],"names":["DungeonStatus","Object","freeze","EMPTY","ADVENTURING","COLLECT","TurnOrder","heroes","mobs","order","interlace","position","nextNotDead","dead","length","nextPosition","save","mob","splice","uniqueid","Dungeon","props","assign","maxMonster","party","dropList","dungeonTime","floorCount","status","lastParty","floorMaterial","completeState","progressNextFloor","id","floorID","createSave","forEach","m","push","Party","heroID","undefined","mobSave","mobTemplate","MobManager","idToMob","Mob","lvl","difficulty","loadSave","t","dungeonWaitTime","DungeonManager","speed","refreshLater","CombatManager","buffTick","passiveCheck","floorComplete","nextFloor","isDead","dungeonView","$","getCurrentID","css","nextTurn","refreshTurnOrder","initiateDungeonFloor","BattleLog","refresh","refreshBeatBar","every","h","inDungeon","hp","maxHP","removeDungeon","clear","openTab","initializeSideBarDungeon","refreshDungeonSelect","beatTotal","floor","FloorManager","floorByID","idAmt","mat","matAmt","type","bossesBeat","rewards","getRewards","ResourceManager","addMaterial","amt","previousFloor","dungeonComplete","addRewards","setMaxFloor","Math","max","toggleProgress","achievementStats","floorRecord","getFloor","generateDungeonFloor","bossDifficulty","resetForFloor","html","name","refreshSidebarDungeonMats","showDungeonReward","boss","find","event","formatToUnits","round","bossByDungeon","MonsterHall","monsterKillCount","hero","enemy","toggle","refreshDungeonFarmStatus","$toggleProgress","dungeons","dungeonCreatingID","dungeonPaid","partySize","unlockDungeon","dungeonCanSee","includes","bossDungeonCanSee","bossRefight","bossCleared","d","addDungeon","dungeon","dungeonByID","addTime","dungeonStatus","dungeonID","createDungeon","PartyCreator","lockParty","initializeParty","getCurrentDungeon","dungeonSlotCount","bossCount","bossMaxCount","filter","abandonCurrentDungeon","resetDungeon","dungeonid","mobsByDungeon","getHpFloor","x2","fl","ce","ceil","x1","x3","y1","miscLoadedValues","hpFloor","y3","getPowFloor","powFloor","dungeonMatRefresh","matID","refreshDungeonMatBar","abandonAllDungeons","completeBoss","refreshAllOrders","refreshAllSales"],"mappings":"AAAA;;;;;;;;AACA,IAAMA,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,KAAK,EAAC,CAAP;AAASC,EAAAA,WAAW,EAAC,CAArB;AAAuBC,EAAAA,OAAO,EAAC;AAA/B,CAAd,CAAtB;;IAEMC,S;;;AACF,qBAAYC,MAAZ,EAAmBC,IAAnB,EAAyB;AAAA;;AACrB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaC,SAAS,CAACH,MAAD,EAAQC,IAAR,CAAtB;AACA,SAAKG,QAAL,GAAgB,CAAhB;AACA,SAAKC,WAAL;AACH;;;;kCACa;AACV,aAAO,KAAKH,KAAL,CAAW,KAAKE,QAAhB,EAA0BE,IAA1B,EAAP;AAAyC,aAAKF,QAAL,IAAiB,CAAjB;AAAzC;AACH;;;+BACU;AACP,aAAO,KAAKF,KAAZ;AACH;;;+BACU;AACP,aAAO,KAAKA,KAAL,CAAW,KAAKE,QAAhB,CAAP;AACH;;;mCACc;AACX,WAAKA,QAAL,IAAiB,CAAjB;AACA,UAAI,KAAKA,QAAL,KAAkB,KAAKF,KAAL,CAAWK,MAAjC,EAAyC,KAAKH,QAAL,GAAgB,CAAhB;AACzC,UAAI,KAAKF,KAAL,CAAW,KAAKE,QAAhB,EAA0BE,IAA1B,EAAJ,EAAsC,KAAKE,YAAL;AACzC;;;iCACY;AACT,UAAMC,IAAI,GAAG,EAAb;AACAA,MAAAA,IAAI,CAACL,QAAL,GAAgB,KAAKA,QAArB;AACA,aAAOK,IAAP;AACH;;;6BACQA,I,EAAM;AACX,WAAKL,QAAL,GAAgBK,IAAI,CAACL,QAArB;AACH;;;2BACMM,G,EAAK;AACR,WAAKR,KAAL,CAAWS,MAAX,CAAkB,KAAKP,QAAL,GAAc,CAAhC,EAAkC,CAAlC,EAAoCM,GAApC;AACH;;;mCACc;AACX,aAAO,KAAKR,KAAL,CAAW,KAAKE,QAAhB,EAA0BQ,QAAjC;AACH;;;;;;IAGCC,O;;;AACF,mBAAYC,KAAZ,EAAmB;AAAA;;AACfpB,IAAAA,MAAM,CAACqB,MAAP,CAAc,IAAd,EAAoBD,KAApB;AACA,SAAKE,UAAL,GAAkB,CAAlB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKhB,IAAL,GAAY,EAAZ;AACA,SAAKiB,QAAL,GAAgB,EAAhB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKlB,KAAL,GAAa,IAAb;AACA,SAAKmB,MAAL,GAAc5B,aAAa,CAACG,KAA5B;AACA,SAAK0B,SAAL,GAAiB,IAAjB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,aAAL,GAAqB,MAArB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACH;;;;iCACY;AACT,UAAMhB,IAAI,GAAG,EAAb;AACAA,MAAAA,IAAI,CAACiB,EAAL,GAAU,KAAKA,EAAf;AACAjB,MAAAA,IAAI,CAACa,SAAL,GAAiB,KAAKA,SAAtB;AACAb,MAAAA,IAAI,CAACkB,OAAL,GAAe,KAAKA,OAApB;AACA,UAAI,KAAKV,KAAL,KAAe,IAAnB,EAAyBR,IAAI,CAACQ,KAAL,GAAa,IAAb,CAAzB,KACKR,IAAI,CAACQ,KAAL,GAAa,KAAKA,KAAL,CAAWW,UAAX,EAAb;AACLnB,MAAAA,IAAI,CAACR,IAAL,GAAY,EAAZ;AACA,WAAKA,IAAL,CAAU4B,OAAV,CAAkB,UAAAC,CAAC,EAAE;AACjBrB,QAAAA,IAAI,CAACR,IAAL,CAAU8B,IAAV,CAAeD,CAAC,CAACF,UAAF,EAAf;AACH,OAFD;AAGAnB,MAAAA,IAAI,CAACS,QAAL,GAAgB,KAAKA,QAArB;AACAT,MAAAA,IAAI,CAACU,WAAL,GAAmB,KAAKA,WAAxB;AACAV,MAAAA,IAAI,CAACW,UAAL,GAAkB,KAAKA,UAAvB;AACAX,MAAAA,IAAI,CAACP,KAAL,GAAa,EAAb;AACA,UAAI,KAAKA,KAAL,KAAe,IAAnB,EAAyBO,IAAI,CAACP,KAAL,GAAa,IAAb,CAAzB,KACKO,IAAI,CAACP,KAAL,GAAa,KAAKA,KAAL,CAAW0B,UAAX,EAAb;AACLnB,MAAAA,IAAI,CAACY,MAAL,GAAc,KAAKA,MAAnB;AACAZ,MAAAA,IAAI,CAACe,aAAL,GAAqB,KAAKA,aAA1B;AACAf,MAAAA,IAAI,CAACgB,iBAAL,GAAyB,KAAKA,iBAA9B;AACA,aAAOhB,IAAP;AACH;;;6BACQA,I,EAAM;AAAA;;AACX,UAAIA,IAAI,CAACQ,KAAL,KAAe,IAAnB,EAAyB,KAAKA,KAAL,GAAa,IAAIe,KAAJ,CAAUvB,IAAI,CAACQ,KAAL,CAAWgB,MAArB,CAAb,CAAzB,KACKxB,IAAI,CAACQ,KAAL,GAAa,IAAb;AACL,UAAIR,IAAI,CAACa,SAAL,KAAmBY,SAAvB,EAAkC,KAAKZ,SAAL,GAAiBb,IAAI,CAACa,SAAtB;AAClC,UAAIb,IAAI,CAACkB,OAAL,KAAiBO,SAArB,EAAgC,KAAKP,OAAL,GAAelB,IAAI,CAACkB,OAApB;AAChC,WAAK1B,IAAL,GAAY,EAAZ;AACAQ,MAAAA,IAAI,CAACR,IAAL,CAAU4B,OAAV,CAAkB,UAAAM,OAAO,EAAI;AACzB,YAAMC,WAAW,GAAGC,UAAU,CAACC,OAAX,CAAmBH,OAAO,CAACT,EAA3B,CAApB;AACA,YAAMhB,GAAG,GAAG,IAAI6B,GAAJ,CAAQJ,OAAO,CAACK,GAAhB,EAAqBJ,WAArB,EAAkCD,OAAO,CAACM,UAA1C,CAAZ;AACA/B,QAAAA,GAAG,CAACgC,QAAJ,CAAaP,OAAb;;AACA,QAAA,KAAI,CAAClC,IAAL,CAAU8B,IAAV,CAAerB,GAAf;AACH,OALD;;AAMA,UAAID,IAAI,CAACP,KAAL,KAAe,IAAnB,EAAyB;AACrB,aAAKA,KAAL,GAAa,IAAIH,SAAJ,CAAc,KAAKkB,KAAL,CAAWjB,MAAzB,EAAgC,KAAKC,IAArC,CAAb;AACA,aAAKC,KAAL,CAAWwC,QAAX,CAAoBjC,IAAI,CAACP,KAAzB;AACH;;AACD,WAAKgB,QAAL,GAAgBT,IAAI,CAACS,QAArB;AACA,WAAKC,WAAL,GAAmBV,IAAI,CAACU,WAAxB;AACA,WAAKC,UAAL,GAAkBX,IAAI,CAACW,UAAvB;AACA,WAAKC,MAAL,GAAcZ,IAAI,CAACY,MAAnB;AACA,UAAIZ,IAAI,CAACe,aAAL,KAAuBU,SAA3B,EAAsC,KAAKV,aAAL,GAAqBf,IAAI,CAACe,aAA1B;AACtC,UAAIf,IAAI,CAACgB,iBAAL,KAA2BS,SAA/B,EAA0C,KAAKT,iBAAL,GAAyBhB,IAAI,CAACgB,iBAA9B;AAC7C;;;4BACOkB,C,EAAG;AACP;AACA,UAAI,KAAKtB,MAAL,KAAgB5B,aAAa,CAACI,WAAlC,EAA+C;AAC/C,WAAKsB,WAAL,IAAoBwB,CAApB;AACA,UAAMC,eAAe,GAAGC,cAAc,CAACC,KAAvC;AACA,UAAMC,YAAY,GAAG,KAAK5B,WAAL,IAAoB,IAAEyB,eAA3C;AACAI,MAAAA,aAAa,CAACD,YAAd,GAA6BA,YAA7B;;AACA,aAAO,KAAK5B,WAAL,IAAoByB,eAA3B,EAA4C;AACxC;AACA,aAAKK,QAAL,CAAc,QAAd;AACA,aAAKC,YAAL,CAAkB,QAAlB;;AACA,YAAI,KAAKC,aAAL,EAAJ,EAA0B;AACtB,eAAKC,SAAL,CAAeL,YAAf;AACA,eAAK5B,WAAL,IAAoByB,eAApB;AACA;AACH;;AACD,YAAI,KAAK3B,KAAL,CAAWoC,MAAX,EAAJ,EAAyB;AACrB,eAAKD,SAAL,CAAeL,YAAf,EAA4B,IAA5B;AACA,eAAK5B,WAAL,IAAoByB,eAApB;AACA;AACH;;AACD,YAAI,CAACG,YAAD,IAAiBF,cAAc,CAACS,WAAf,KAA+B,KAAK5B,EAAzD,EAA6D6B,CAAC,uBAAgB,KAAKrD,KAAL,CAAWsD,YAAX,EAAhB,EAAD,CAA8CC,GAA9C,CAAkD,OAAlD,EAA0D,IAA1D;AAC7DT,QAAAA,aAAa,CAACU,QAAd,CAAuB,IAAvB;AACA,aAAKvC,WAAL,IAAoByB,eAApB;AACA,YAAI,CAACG,YAAD,IAAiBF,cAAc,CAACS,WAAf,KAA+B,KAAK5B,EAAzD,EAA6DiC,gBAAgB,CAAC,KAAKjC,EAAN,CAAhB;AAChE;;AACD,UAAIqB,YAAJ,EAAkB;AACda,QAAAA,oBAAoB,CAAC,KAAKlC,EAAN,CAApB;AACAmC,QAAAA,SAAS,CAACC,OAAV;AACH;;AACD,UAAIjB,cAAc,CAACS,WAAf,KAA+B,KAAK5B,EAAxC,EAA4CqC,cAAc,CAAC,KAAK7D,KAAL,CAAWsD,YAAX,EAAD,EAA2B,KAAKrC,WAAhC,CAAd;AAC/C;;;oCACe;AACZ,aAAO,KAAKlB,IAAL,CAAU+D,KAAV,CAAgB,UAAAlC,CAAC;AAAA,eAAEA,CAAC,CAACxB,IAAF,EAAF;AAAA,OAAjB,CAAP;AACH;;;oCACeW,K,EAAO;AACnB,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKK,SAAL,GAAiBL,KAAK,CAACgB,MAAvB;AACH;;;mCACc;AACX,UAAI,KAAKZ,MAAL,KAAgB5B,aAAa,CAACI,WAA9B,IAA6C,KAAKwB,MAAL,KAAgB5B,aAAa,CAACK,OAA/E,EAAwF;AACxF,WAAKmB,KAAL,CAAWjB,MAAX,CAAkB6B,OAAlB,CAA0B,UAAAoC,CAAC,EAAE;AACzBA,QAAAA,CAAC,CAACC,SAAF,GAAc,KAAd;AACAD,QAAAA,CAAC,CAACE,EAAF,GAAOF,CAAC,CAACG,KAAF,EAAP;AACH,OAHD;AAIAvB,MAAAA,cAAc,CAACwB,aAAf,CAA6B,KAAK3C,EAAlC;;AACA,UAAImB,cAAc,CAACS,WAAf,KAA+B,KAAK5B,EAAxC,EAA4C;AACxCmC,QAAAA,SAAS,CAACS,KAAV;AACAC,QAAAA,OAAO,CAAC,aAAD,CAAP;AACH;;AACDC,MAAAA,wBAAwB;AACxBC,MAAAA,oBAAoB;AACpB,WAAKpD,MAAL,GAAc5B,aAAa,CAACG,KAA5B;AACA,WAAKM,KAAL,GAAa,IAAb;AACA,WAAKiB,WAAL,GAAmB,CAAnB;AACA,WAAKC,UAAL,GAAkB,CAAlB;AACA,WAAKsD,SAAL,GAAiB,CAAjB;AACA,WAAKlD,aAAL,GAAqB,MAArB;AACA;AACH;;;iCACY;AACT,UAAMmD,KAAK,GAAGC,YAAY,CAACC,SAAb,CAAuB,KAAKlD,OAA5B,CAAd;AACA,aAAO,IAAImD,KAAJ,CAAUH,KAAK,CAACI,GAAhB,EAAoBJ,KAAK,CAACK,MAA1B,CAAP;AACH;;;iCACY;AACT,UAAI,KAAKC,IAAL,KAAc,MAAlB,EAA0B;AACtB,aAAKC,UAAL,CAAgBnD,IAAhB,CAAqB,KAAKL,EAA1B;AACA;AACH;;AAAA;AACD,UAAMyD,OAAO,GAAG,KAAKC,UAAL,EAAhB;AACAC,MAAAA,eAAe,CAACC,WAAhB,CAA4BH,OAAO,CAACzD,EAApC,EAAuCyD,OAAO,CAACI,GAA/C;AACH;;;8BACSxC,Y,EAAcyC,a,EAAe;AACnC,UAAI,KAAKpE,UAAL,GAAkB,CAAlB,IAAuB,KAAK6D,IAAL,KAAc,MAAzC,EAAiD,OAAO,KAAKQ,eAAL,CAAqBD,aAArB,CAAP;;AACjD,UAAI,CAACA,aAAD,IAAkB,KAAKpE,UAAL,GAAkB,CAAxC,EAA2C;AACvC,aAAKsE,UAAL;AACA,aAAKzE,KAAL,CAAW0E,WAAX,CAAuB,KAAKjE,EAA5B,EAA+B,KAAKN,UAApC;AACH;;AACD,UAAIoE,aAAJ,EAAmB;AACf,aAAKpE,UAAL,GAAkBwE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAW,KAAKzE,UAAL,GAAgB,CAA3B,CAAlB;AACA,aAAK0E,cAAL,CAAoB,KAApB;AACH,OAHD,MAIK,IAAI,KAAKrE,iBAAL,IAA0B,KAAKL,UAAL,KAAoB,CAAlD,EAAqD,KAAKA,UAAL,IAAmB,CAAnB;;AAC1D2E,MAAAA,gBAAgB,CAACC,WAAjB,CAA6B,KAAKtE,EAAlC,EAAsC,KAAKN,UAA3C;AACA,UAAMuD,KAAK,GAAGC,YAAY,CAACqB,QAAb,CAAsB,KAAKvE,EAA3B,EAA+B,KAAKN,UAApC,CAAd;AACA,WAAKO,OAAL,GAAegD,KAAK,CAACjD,EAArB;AACA,WAAKzB,IAAL,GAAYoC,UAAU,CAAC6D,oBAAX,CAAgCvB,KAAhC,EAAsC,KAAKvD,UAA3C,EAAsD,KAAK+E,cAAL,EAAtD,CAAZ;AACA,WAAKlF,KAAL,CAAWmF,aAAX;AACA,WAAKlG,KAAL,GAAa,IAAIH,SAAJ,CAAc,KAAKkB,KAAL,CAAWjB,MAAzB,EAAgC,KAAKC,IAArC,CAAb;AACA,UAAI8C,YAAJ,EAAkB;AAClBa,MAAAA,oBAAoB,CAAC,KAAKlC,EAAN,CAApB;AACA6B,MAAAA,CAAC,CAAC,SAAO,KAAK7B,EAAb,CAAD,CAAkB2E,IAAlB,WAA0B,KAAKC,IAA/B,gBAAyC,KAAKlF,UAA9C;AACAmF,MAAAA,yBAAyB,CAAC,KAAK7E,EAAN,CAAzB;AACH;;;sCACiB;AACd,WAAKL,MAAL,GAAc5B,aAAa,CAACK,OAA5B;AACA2E,MAAAA,oBAAoB;AACpB,UAAI5B,cAAc,CAACS,WAAf,KAA+B,KAAK5B,EAAxC,EAA4C8E,iBAAiB,CAAC,KAAK9E,EAAN,CAAjB;AAC/C;;;oCACe;AACZ,UAAI,KAAKuD,IAAL,KAAc,MAAlB,EAA0B,OAAO,QAAP;AAC1B,UAAMwB,IAAI,GAAG,KAAKxG,IAAL,CAAUyG,IAAV,CAAe,UAAA5E,CAAC;AAAA,eAAEA,CAAC,CAAC6E,KAAF,KAAY,MAAd;AAAA,OAAhB,CAAb;AACA,uBAAUC,aAAa,CAACH,IAAI,CAACtC,EAAN,EAAS,CAAT,CAAvB,eAAuCyB,IAAI,CAACiB,KAAL,CAAW,MAAIJ,IAAI,CAACtC,EAAT,GAAYsC,IAAI,CAACrC,KAAL,EAAvB,IAAqC,GAA5E;AACH;;;qCACgB;AACb,UAAI,KAAKa,IAAL,KAAc,SAAlB,EAA6B,OAAO,CAAP;AAC7B,UAAMwB,IAAI,GAAG5D,cAAc,CAACiE,aAAf,CAA6B,KAAKpF,EAAlC,CAAb;AACA,aAAOqF,WAAW,CAACC,gBAAZ,CAA6BP,IAA7B,CAAP;AACH;;;6BACQxB,I,EAAM;AACX,WAAKhE,KAAL,CAAWjB,MAAX,CAAkB6B,OAAlB,CAA0B,UAAAoF,IAAI,EAAI;AAC9BA,QAAAA,IAAI,CAAChE,QAAL,CAAcgC,IAAd;AACH,OAFD;AAGA,WAAKhF,IAAL,CAAU4B,OAAV,CAAkB,UAAAqF,KAAK,EAAI;AACvBA,QAAAA,KAAK,CAACjE,QAAN,CAAegC,IAAf;AACH,OAFD;AAGH;;;iCACYA,I,EAAM;AACf,WAAKhE,KAAL,CAAWjB,MAAX,CAAkB6B,OAAlB,CAA0B,UAAAoF,IAAI,EAAI;AAC9BA,QAAAA,IAAI,CAAC/D,YAAL,CAAkB+B,IAAlB;AACH,OAFD;AAGA,WAAKhF,IAAL,CAAU4B,OAAV,CAAkB,UAAAqF,KAAK,EAAI;AACvBA,QAAAA,KAAK,CAAChE,YAAN,CAAmB+B,IAAnB;AACH,OAFD;AAGH;;;mCACckC,M,EAAQ;AACnBA,MAAAA,MAAM,GAAGA,MAAM,IAAI,CAAC,KAAK1F,iBAAzB;AACA,WAAKA,iBAAL,GAAyB0F,MAAzB;AACAC,MAAAA,wBAAwB,CAAC,KAAK1F,EAAN,CAAxB;AACA,UAAImB,cAAc,CAACS,WAAf,KAA+B,KAAK5B,EAAxC,EAA4C;AAC5C,UAAIyF,MAAJ,EAAYE,eAAe,CAAChB,IAAhB,CAAqB,aAArB,EAAZ,KACKgB,eAAe,CAAChB,IAAhB,CAAqB,SAArB;AACR;;;;;;AAGL,IAAMxD,cAAc,GAAG;AACnByE,EAAAA,QAAQ,EAAG,EADQ;AAEnBC,EAAAA,iBAAiB,EAAG,IAFD;AAGnBjE,EAAAA,WAAW,EAAG,IAHK;AAInBR,EAAAA,KAAK,EAAG,IAJW;AAKnB0E,EAAAA,WAAW,EAAG,EALK;AAMnBtC,EAAAA,UAAU,EAAG,EANM;AAOnBuC,EAAAA,SAAS,EAAG,CAPO;AAQnBC,EAAAA,aARmB,yBAQLhG,EARK,EAQD;AACd,SAAK8F,WAAL,CAAiBzF,IAAjB,CAAsBL,EAAtB;AACH,GAVkB;AAWnBiG,EAAAA,aAXmB,yBAWLjG,EAXK,EAWD;AACd,WAAO,KAAK8F,WAAL,CAAiBI,QAAjB,CAA0BlG,EAA1B,CAAP;AACH,GAbkB;AAcnBmG,EAAAA,iBAdmB,6BAcDnG,EAdC,EAcG;AAClB,QAAIqF,WAAW,CAACe,WAAZ,EAAJ,EAA+B,OAAO,KAAKN,WAAL,CAAiBI,QAAjB,CAA0BlG,EAA1B,CAAP;AAC/B,WAAO,KAAK8F,WAAL,CAAiBI,QAAjB,CAA0BlG,EAA1B,KAAiC,CAACmB,cAAc,CAACkF,WAAf,CAA2BrG,EAA3B,CAAzC;AACH,GAjBkB;AAkBnBE,EAAAA,UAlBmB,wBAkBN;AACT,QAAMnB,IAAI,GAAG,EAAb;AACAA,IAAAA,IAAI,CAAC6G,QAAL,GAAgB,EAAhB;AACA,SAAKA,QAAL,CAAczF,OAAd,CAAsB,UAAAmG,CAAC,EAAI;AACvBvH,MAAAA,IAAI,CAAC6G,QAAL,CAAcvF,IAAd,CAAmBiG,CAAC,CAACpG,UAAF,EAAnB;AACH,KAFD;AAGAnB,IAAAA,IAAI,CAAC+G,WAAL,GAAmB,KAAKA,WAAxB;AACA/G,IAAAA,IAAI,CAACqC,KAAL,GAAa,KAAKA,KAAlB;AACArC,IAAAA,IAAI,CAACyE,UAAL,GAAkB,KAAKA,UAAvB;AACAzE,IAAAA,IAAI,CAACgH,SAAL,GAAiB,KAAKA,SAAtB;AACA,WAAOhH,IAAP;AACH,GA7BkB;AA8BnBwH,EAAAA,UA9BmB,sBA8BRC,OA9BQ,EA8BC;AAChB,SAAKZ,QAAL,CAAcvF,IAAd,CAAmBmG,OAAnB;AACH,GAhCkB;AAiCnBxF,EAAAA,QAjCmB,oBAiCVjC,IAjCU,EAiCJ;AACXA,IAAAA,IAAI,CAAC6G,QAAL,CAAczF,OAAd,CAAsB,UAAAmG,CAAC,EAAI;AACvB,UAAME,OAAO,GAAGrF,cAAc,CAACsF,WAAf,CAA2BH,CAAC,CAACtG,EAA7B,CAAhB;AACAwG,MAAAA,OAAO,CAACxF,QAAR,CAAiBsF,CAAjB;AACH,KAHD;AAIA,SAAKlF,KAAL,GAAarC,IAAI,CAACqC,KAAlB;AACA,QAAI,OAAOrC,IAAI,CAAC+G,WAAZ,KAA4B,WAAhC,EAA6C,KAAKA,WAAL,GAAmB/G,IAAI,CAAC+G,WAAxB;AAC7C,QAAI,OAAO/G,IAAI,CAACyE,UAAZ,KAA2B,WAA/B,EAA4C,KAAKA,UAAL,GAAkBzE,IAAI,CAACyE,UAAvB;AAC5C,QAAI,OAAOzE,IAAI,CAACgH,SAAZ,KAA0B,WAA9B,EAA2C,KAAKA,SAAL,GAAiBhH,IAAI,CAACgH,SAAtB;AAC9C,GA1CkB;AA2CnBW,EAAAA,OA3CmB,mBA2CXzF,CA3CW,EA2CR;AACP,SAAK2E,QAAL,CAAczF,OAAd,CAAsB,UAAAqG,OAAO,EAAI;AAC7BA,MAAAA,OAAO,CAACE,OAAR,CAAgBzF,CAAhB;AACH,KAFD;AAGH,GA/CkB;AAgDnB0F,EAAAA,aAhDmB,yBAgDLC,SAhDK,EAgDM;AACrB,WAAO,KAAKhB,QAAL,CAAcZ,IAAd,CAAmB,UAAAsB,CAAC;AAAA,aAAEA,CAAC,CAACtG,EAAF,KAAO4G,SAAT;AAAA,KAApB,EAAwCjH,MAA/C;AACH,GAlDkB;AAmDnBgD,EAAAA,aAnDmB,yBAmDLiE,SAnDK,EAmDM;AACrB,QAAMJ,OAAO,GAAG,KAAKC,WAAL,CAAiBG,SAAjB,CAAhB;AACAJ,IAAAA,OAAO,CAACjH,KAAR,GAAgB,IAAhB;AACAiH,IAAAA,OAAO,CAAC7G,MAAR,GAAiB5B,aAAa,CAACG,KAA/B;AACAsI,IAAAA,OAAO,CAACzG,iBAAR,GAA4B,IAA5B;AACA+C,IAAAA,wBAAwB;AAC3B,GAzDkB;AA0DnB+D,EAAAA,aA1DmB,yBA0DL5D,KA1DK,EA0DE;AACjB,QAAM1D,KAAK,GAAGuH,YAAY,CAACC,SAAb,EAAd;AACA,QAAMP,OAAO,GAAG,KAAKC,WAAL,CAAiB,KAAKZ,iBAAtB,CAAhB;AACAW,IAAAA,OAAO,CAACxD,SAAR,GAAoB,CAApB;AACAwD,IAAAA,OAAO,CAAC9G,UAAR,GAAqB,CAArB;AACA8G,IAAAA,OAAO,CAACzG,iBAAR,GAA4B,IAA5B;AACAyG,IAAAA,OAAO,CAAC9G,UAAR,GAAqBuD,KAAK,GAAC,CAA3B;AACAuD,IAAAA,OAAO,CAAC7G,MAAR,GAAiB5B,aAAa,CAACI,WAA/B;AACA,SAAKyD,WAAL,GAAmB,KAAKiE,iBAAxB;AACAW,IAAAA,OAAO,CAACQ,eAAR,CAAwBzH,KAAxB;AACAiH,IAAAA,OAAO,CAAC9E,SAAR;AACAoB,IAAAA,wBAAwB;AAC3B,GAtEkB;AAuEnB2D,EAAAA,WAvEmB,uBAuEPG,SAvEO,EAuEI;AACnB,WAAO,KAAKhB,QAAL,CAAcZ,IAAd,CAAmB,UAAAsB,CAAC;AAAA,aAAIA,CAAC,CAACtG,EAAF,KAAS4G,SAAb;AAAA,KAApB,CAAP;AACH,GAzEkB;AA0EnBK,EAAAA,iBA1EmB,+BA0EC;AAChB,WAAO,KAAKR,WAAL,CAAiB,KAAK7E,WAAtB,CAAP;AACH,GA5EkB;AA6EnBsF,EAAAA,gBA7EmB,8BA6EA;AACf,QAAMV,OAAO,GAAG,KAAKC,WAAL,CAAiB,KAAKZ,iBAAtB,CAAhB;AACA,QAAIW,OAAO,CAACjD,IAAR,IAAgB,MAApB,EAA4B,OAAO,CAAP;AAC5B,WAAO,KAAKwC,SAAZ;AACH,GAjFkB;AAkFnBoB,EAAAA,SAlFmB,uBAkFP;AACR,WAAO,KAAK3D,UAAL,CAAgB3E,MAAvB;AACH,GApFkB;AAqFnBwH,EAAAA,WArFmB,uBAqFPrG,EArFO,EAqFH;AACZ,WAAO,KAAKwD,UAAL,CAAgB0C,QAAhB,CAAyBlG,EAAzB,CAAP;AACH,GAvFkB;AAwFnBoH,EAAAA,YAxFmB,0BAwFJ;AACX,WAAO,KAAKxB,QAAL,CAAcyB,MAAd,CAAqB,UAAAf,CAAC;AAAA,aAAIA,CAAC,CAAC/C,IAAF,KAAW,MAAf;AAAA,KAAtB,EAA6C1E,MAApD;AACH,GA1FkB;AA2FnByI,EAAAA,qBA3FmB,mCA2FK;AACpB,QAAMd,OAAO,GAAG,KAAKS,iBAAL,EAAhB;AACAT,IAAAA,OAAO,CAACe,YAAR;AACH,GA9FkB;AA+FnBnC,EAAAA,aA/FmB,yBA+FLoC,SA/FK,EA+FM;AACrB,WAAOtE,YAAY,CAACuE,aAAb,CAA2BD,SAA3B,EAAsC,CAAtC,CAAP;AACH,GAjGkB;AAkGnBpD,EAAAA,cAlGmB,4BAkGF;AACb,SAAK6C,iBAAL,GAAyB7C,cAAzB;AACH,GApGkB;AAqGnBsD,EAAAA,UArGmB,sBAqGRC,EArGQ,EAqGJ;AACX,QAAMC,EAAE,GAAG1D,IAAI,CAACjB,KAAL,CAAW,CAAC0E,EAAE,GAAC,CAAJ,IAAO,GAAlB,CAAX;AACA,QAAME,EAAE,GAAG3D,IAAI,CAAC4D,IAAL,CAAU,CAACH,EAAE,GAAC,CAAJ,IAAO,GAAjB,CAAX;AACA,QAAMI,EAAE,GAAGH,EAAE,GAAC,GAAH,GAAO,CAAlB;AACA,QAAMI,EAAE,GAAGH,EAAE,GAAC,GAAH,GAAO,CAAlB;AACA,QAAMI,EAAE,GAAGC,gBAAgB,CAACC,OAAjB,CAAyBP,EAAzB,CAAX;AACA,QAAMQ,EAAE,GAAGF,gBAAgB,CAACC,OAAjB,CAAyBN,EAAzB,CAAX;AACA,QAAID,EAAE,KAAKC,EAAX,EAAe,OAAOI,EAAP;AACf,WAAO/D,IAAI,CAACiB,KAAL,CAAW,CAACwC,EAAE,GAACI,EAAJ,KAASK,EAAE,GAACH,EAAZ,KAAiBD,EAAE,GAACD,EAApB,IAAwBE,EAAnC,CAAP;AACH,GA9GkB;AA+GnBI,EAAAA,WA/GmB,uBA+GPV,EA/GO,EA+GH;AACZ,QAAMC,EAAE,GAAG1D,IAAI,CAACjB,KAAL,CAAW,CAAC0E,EAAE,GAAC,CAAJ,IAAO,GAAlB,CAAX;AACA,QAAME,EAAE,GAAG3D,IAAI,CAAC4D,IAAL,CAAU,CAACH,EAAE,GAAC,CAAJ,IAAO,GAAjB,CAAX;AACA,QAAMI,EAAE,GAAGH,EAAE,GAAC,GAAH,GAAO,CAAlB;AACA,QAAMI,EAAE,GAAGH,EAAE,GAAC,GAAH,GAAO,CAAlB;AACA,QAAMI,EAAE,GAAGC,gBAAgB,CAACI,QAAjB,CAA0BV,EAA1B,CAAX;AACA,QAAMQ,EAAE,GAAGF,gBAAgB,CAACI,QAAjB,CAA0BT,EAA1B,CAAX;AACA,QAAID,EAAE,KAAKC,EAAX,EAAe,OAAOI,EAAP;AACf,WAAO/D,IAAI,CAACiB,KAAL,CAAW,CAACwC,EAAE,GAACI,EAAJ,KAASK,EAAE,GAACH,EAAZ,KAAiBD,EAAE,GAACD,EAApB,IAAwBE,EAAnC,CAAP;AACH,GAxHkB;AAyHnBM,EAAAA,iBAzHmB,6BAyHDC,KAzHC,EAyHM;AACrB,SAAK5C,QAAL,CAAczF,OAAd,CAAsB,UAAAqG,OAAO,EAAI;AAC7B,UAAIA,OAAO,CAAC7G,MAAR,KAAmB5B,aAAa,CAACI,WAArC,EAAkD;AAClD,UAAI+E,YAAY,CAACC,SAAb,CAAuBqD,OAAO,CAACvG,OAA/B,EAAwCoD,GAAxC,KAAgDmF,KAApD,EAA2D;AAC3DC,MAAAA,oBAAoB,CAACjC,OAAO,CAACxG,EAAT,CAApB;AACH,KAJD;AAKH,GA/HkB;AAgInB0I,EAAAA,kBAhImB,gCAgIE;AACjB,SAAK9C,QAAL,CAAczF,OAAd,CAAsB,UAAAqG,OAAO,EAAI;AAC7BA,MAAAA,OAAO,CAACe,YAAR;AACH,KAFD;AAGH,GApIkB;AAqInBoB,EAAAA,YArImB,wBAqIN3I,EArIM,EAqIF;AACb,SAAKwD,UAAL,CAAgBnD,IAAhB,CAAqBL,EAArB;AACA4I,IAAAA,gBAAgB;AAChBC,IAAAA,eAAe;AAClB;AAzIkB,CAAvB","sourcesContent":["\"use strict\";\r\nconst DungeonStatus = Object.freeze({EMPTY:0,ADVENTURING:1,COLLECT:2});\r\n\r\nclass TurnOrder {\r\n    constructor(heroes,mobs) {\r\n        this.heroes = heroes;\r\n        this.mobs = mobs;\r\n        this.order = interlace(heroes,mobs);\r\n        this.position = 0;\r\n        this.nextNotDead();\r\n    }\r\n    nextNotDead() {\r\n        while (this.order[this.position].dead()) this.position += 1;\r\n    }\r\n    getOrder() {\r\n        return this.order;\r\n    }\r\n    nextTurn() {\r\n        return this.order[this.position];\r\n    }\r\n    nextPosition() {\r\n        this.position += 1;\r\n        if (this.position === this.order.length) this.position = 0;\r\n        if (this.order[this.position].dead()) this.nextPosition();\r\n    }\r\n    createSave() {\r\n        const save = {};\r\n        save.position = this.position;\r\n        return save;\r\n    }\r\n    loadSave(save) {\r\n        this.position = save.position;\r\n    }\r\n    addMob(mob) {\r\n        this.order.splice(this.position+1,0,mob);\r\n    }\r\n    getCurrentID() {\r\n        return this.order[this.position].uniqueid;\r\n    }\r\n}\r\n\r\nclass Dungeon {\r\n    constructor(props) {\r\n        Object.assign(this, props);\r\n        this.maxMonster = 4;\r\n        this.party = null;\r\n        this.mobs = [];\r\n        this.dropList = [];\r\n        this.dungeonTime = 0;\r\n        this.floorCount = 0;\r\n        this.order = null;\r\n        this.status = DungeonStatus.EMPTY;\r\n        this.lastParty = null;\r\n        this.floorMaterial = null;\r\n        this.completeState = \"none\";\r\n        this.progressNextFloor = true;\r\n    }\r\n    createSave() {\r\n        const save = {};\r\n        save.id = this.id;\r\n        save.lastParty = this.lastParty;\r\n        save.floorID = this.floorID;\r\n        if (this.party === null) save.party = null;\r\n        else save.party = this.party.createSave();\r\n        save.mobs = [];\r\n        this.mobs.forEach(m=>{\r\n            save.mobs.push(m.createSave());\r\n        });\r\n        save.dropList = this.dropList;\r\n        save.dungeonTime = this.dungeonTime;\r\n        save.floorCount = this.floorCount;\r\n        save.order = [];\r\n        if (this.order === null) save.order = null;\r\n        else save.order = this.order.createSave();\r\n        save.status = this.status;\r\n        save.completeState = this.completeState;\r\n        save.progressNextFloor = this.progressNextFloor;\r\n        return save;\r\n    }\r\n    loadSave(save) {\r\n        if (save.party !== null) this.party = new Party(save.party.heroID);\r\n        else save.party = null;\r\n        if (save.lastParty !== undefined) this.lastParty = save.lastParty;\r\n        if (save.floorID !== undefined) this.floorID = save.floorID;\r\n        this.mobs = [];\r\n        save.mobs.forEach(mobSave => {\r\n            const mobTemplate = MobManager.idToMob(mobSave.id);\r\n            const mob = new Mob(mobSave.lvl, mobTemplate, mobSave.difficulty);\r\n            mob.loadSave(mobSave);\r\n            this.mobs.push(mob);\r\n        });\r\n        if (save.order !== null) {\r\n            this.order = new TurnOrder(this.party.heroes,this.mobs);\r\n            this.order.loadSave(save.order);\r\n        }   \r\n        this.dropList = save.dropList;\r\n        this.dungeonTime = save.dungeonTime;\r\n        this.floorCount = save.floorCount;\r\n        this.status = save.status;\r\n        if (save.completeState !== undefined) this.completeState = save.completeState;\r\n        if (save.progressNextFloor !== undefined) this.progressNextFloor = save.progressNextFloor;\r\n    }\r\n    addTime(t) {\r\n        //if there's enough time, grab the next guy and do some combat\r\n        if (this.status !== DungeonStatus.ADVENTURING) return;\r\n        this.dungeonTime += t;\r\n        const dungeonWaitTime = DungeonManager.speed;\r\n        const refreshLater = this.dungeonTime >= 2*dungeonWaitTime;\r\n        CombatManager.refreshLater = refreshLater;\r\n        while (this.dungeonTime >= dungeonWaitTime) {\r\n            //take a turn\r\n            this.buffTick(\"onTurn\");\r\n            this.passiveCheck(\"onTurn\");\r\n            if (this.floorComplete()) {\r\n                this.nextFloor(refreshLater);\r\n                this.dungeonTime -= dungeonWaitTime;\r\n                return;\r\n            }\r\n            if (this.party.isDead()) {\r\n                this.nextFloor(refreshLater,true);\r\n                this.dungeonTime -= dungeonWaitTime;\r\n                return;\r\n            }\r\n            if (!refreshLater && DungeonManager.dungeonView === this.id) $(`#beatbarFill${this.order.getCurrentID()}`).css('width',\"0%\");\r\n            CombatManager.nextTurn(this);\r\n            this.dungeonTime -= dungeonWaitTime;\r\n            if (!refreshLater && DungeonManager.dungeonView === this.id) refreshTurnOrder(this.id);\r\n        }\r\n        if (refreshLater) {\r\n            initiateDungeonFloor(this.id);\r\n            BattleLog.refresh();\r\n        }\r\n        if (DungeonManager.dungeonView === this.id) refreshBeatBar(this.order.getCurrentID(),this.dungeonTime);\r\n    }\r\n    floorComplete() {\r\n        return this.mobs.every(m=>m.dead());\r\n    }\r\n    initializeParty(party) {\r\n        this.party = party;\r\n        this.lastParty = party.heroID;\r\n    }\r\n    resetDungeon() {\r\n        if (this.status !== DungeonStatus.ADVENTURING && this.status !== DungeonStatus.COLLECT) return;\r\n        this.party.heroes.forEach(h=>{\r\n            h.inDungeon = false;\r\n            h.hp = h.maxHP()\r\n        });\r\n        DungeonManager.removeDungeon(this.id);\r\n        if (DungeonManager.dungeonView === this.id) {\r\n            BattleLog.clear();\r\n            openTab(\"dungeonsTab\");\r\n        }\r\n        initializeSideBarDungeon();\r\n        refreshDungeonSelect();\r\n        this.status = DungeonStatus.EMPTY;\r\n        this.order = null;\r\n        this.dungeonTime = 0;\r\n        this.floorCount = 0;\r\n        this.beatTotal = 0;\r\n        this.completeState = \"none\";\r\n        return;\r\n    }\r\n    getRewards() {\r\n        const floor = FloorManager.floorByID(this.floorID);\r\n        return new idAmt(floor.mat,floor.matAmt)\r\n    }\r\n    addRewards() {\r\n        if (this.type === \"boss\") {\r\n            this.bossesBeat.push(this.id);\r\n            return\r\n        };\r\n        const rewards = this.getRewards();\r\n        ResourceManager.addMaterial(rewards.id,rewards.amt);\r\n    }\r\n    nextFloor(refreshLater, previousFloor) {\r\n        if (this.floorCount > 0 && this.type === \"boss\") return this.dungeonComplete(previousFloor);\r\n        if (!previousFloor && this.floorCount > 0) {\r\n            this.addRewards();\r\n            this.party.setMaxFloor(this.id,this.floorCount);\r\n        }\r\n        if (previousFloor) {\r\n            this.floorCount = Math.max(1,this.floorCount-1);\r\n            this.toggleProgress(false);\r\n        }\r\n        else if (this.progressNextFloor || this.floorCount === 0) this.floorCount += 1;\r\n        achievementStats.floorRecord(this.id, this.floorCount);\r\n        const floor = FloorManager.getFloor(this.id, this.floorCount);\r\n        this.floorID = floor.id;\r\n        this.mobs = MobManager.generateDungeonFloor(floor,this.floorCount,this.bossDifficulty());\r\n        this.party.resetForFloor();\r\n        this.order = new TurnOrder(this.party.heroes,this.mobs);\r\n        if (refreshLater) return;\r\n        initiateDungeonFloor(this.id);\r\n        $(\"#dsb\"+this.id).html(`${this.name} - ${this.floorCount}`);\r\n        refreshSidebarDungeonMats(this.id);\r\n    }\r\n    dungeonComplete() {\r\n        this.status = DungeonStatus.COLLECT;\r\n        refreshDungeonSelect();\r\n        if (DungeonManager.dungeonView === this.id) showDungeonReward(this.id);\r\n    }\r\n    bossHPStyling() {\r\n        if (this.type !== \"boss\") return \"0 (0%)\";\r\n        const boss = this.mobs.find(m=>m.event === \"boss\")\r\n        return `${formatToUnits(boss.hp,2)} (${Math.round(100*boss.hp/boss.maxHP())+\"%\"})`;\r\n    }\r\n    bossDifficulty() {\r\n        if (this.type === \"regular\") return 0;\r\n        const boss = DungeonManager.bossByDungeon(this.id);\r\n        return MonsterHall.monsterKillCount(boss);\r\n    }\r\n    buffTick(type) {\r\n        this.party.heroes.forEach(hero => {\r\n            hero.buffTick(type);\r\n        })\r\n        this.mobs.forEach(enemy => {\r\n            enemy.buffTick(type);\r\n        })\r\n    }\r\n    passiveCheck(type) {\r\n        this.party.heroes.forEach(hero => {\r\n            hero.passiveCheck(type);\r\n        })\r\n        this.mobs.forEach(enemy => {\r\n            enemy.passiveCheck(type);\r\n        })\r\n    }\r\n    toggleProgress(toggle) {\r\n        toggle = toggle || !this.progressNextFloor;\r\n        this.progressNextFloor = toggle;\r\n        refreshDungeonFarmStatus(this.id);\r\n        if (DungeonManager.dungeonView !== this.id) return;\r\n        if (toggle) $toggleProgress.html(\"Progressing\");\r\n        else $toggleProgress.html(\"Farming\");\r\n    }\r\n}\r\n\r\nconst DungeonManager = {\r\n    dungeons : [],\r\n    dungeonCreatingID : null,\r\n    dungeonView : null,\r\n    speed : 1500,\r\n    dungeonPaid : [],\r\n    bossesBeat : [],\r\n    partySize : 1,\r\n    unlockDungeon(id) {\r\n        this.dungeonPaid.push(id);\r\n    },\r\n    dungeonCanSee(id) {\r\n        return this.dungeonPaid.includes(id);\r\n    },\r\n    bossDungeonCanSee(id) {\r\n        if (MonsterHall.bossRefight()) return this.dungeonPaid.includes(id);\r\n        return this.dungeonPaid.includes(id) && !DungeonManager.bossCleared(id);\r\n    },\r\n    createSave() {\r\n        const save = {};\r\n        save.dungeons = [];\r\n        this.dungeons.forEach(d => {\r\n            save.dungeons.push(d.createSave());\r\n        });\r\n        save.dungeonPaid = this.dungeonPaid;\r\n        save.speed = this.speed;\r\n        save.bossesBeat = this.bossesBeat;\r\n        save.partySize = this.partySize;\r\n        return save;\r\n    },\r\n    addDungeon(dungeon) {\r\n        this.dungeons.push(dungeon);\r\n    },\r\n    loadSave(save) {\r\n        save.dungeons.forEach(d => {\r\n            const dungeon = DungeonManager.dungeonByID(d.id);\r\n            dungeon.loadSave(d);\r\n        });\r\n        this.speed = save.speed;\r\n        if (typeof save.dungeonPaid !== \"undefined\") this.dungeonPaid = save.dungeonPaid;\r\n        if (typeof save.bossesBeat !== \"undefined\") this.bossesBeat = save.bossesBeat;\r\n        if (typeof save.partySize !== \"undefined\") this.partySize = save.partySize;\r\n    },\r\n    addTime(t) {\r\n        this.dungeons.forEach(dungeon => {\r\n            dungeon.addTime(t);\r\n        });\r\n    },\r\n    dungeonStatus(dungeonID) {\r\n        return this.dungeons.find(d=>d.id===dungeonID).status;\r\n    },\r\n    removeDungeon(dungeonID) {\r\n        const dungeon = this.dungeonByID(dungeonID);\r\n        dungeon.party = null;\r\n        dungeon.status = DungeonStatus.EMPTY;\r\n        dungeon.progressNextFloor = true;\r\n        initializeSideBarDungeon();\r\n    },\r\n    createDungeon(floor) {\r\n        const party = PartyCreator.lockParty();\r\n        const dungeon = this.dungeonByID(this.dungeonCreatingID);\r\n        dungeon.beatTotal = 0;\r\n        dungeon.floorCount = 0;\r\n        dungeon.progressNextFloor = true;\r\n        dungeon.floorCount = floor-1;\r\n        dungeon.status = DungeonStatus.ADVENTURING;\r\n        this.dungeonView = this.dungeonCreatingID;\r\n        dungeon.initializeParty(party);\r\n        dungeon.nextFloor();\r\n        initializeSideBarDungeon();\r\n    },\r\n    dungeonByID(dungeonID) {\r\n        return this.dungeons.find(d => d.id === dungeonID);\r\n    },\r\n    getCurrentDungeon() {\r\n        return this.dungeonByID(this.dungeonView);\r\n    },\r\n    dungeonSlotCount() {\r\n        const dungeon = this.dungeonByID(this.dungeonCreatingID);\r\n        if (dungeon.type == \"boss\") return 4;\r\n        return this.partySize;\r\n    },\r\n    bossCount() {\r\n        return this.bossesBeat.length;\r\n    },\r\n    bossCleared(id) {\r\n        return this.bossesBeat.includes(id);\r\n    },\r\n    bossMaxCount() {\r\n        return this.dungeons.filter(d => d.type === \"boss\").length;\r\n    },\r\n    abandonCurrentDungeon() {\r\n        const dungeon = this.getCurrentDungeon();\r\n        dungeon.resetDungeon();\r\n    },\r\n    bossByDungeon(dungeonid) {\r\n        return FloorManager.mobsByDungeon(dungeonid)[0];\r\n    },\r\n    toggleProgress() {\r\n        this.getCurrentDungeon().toggleProgress();\r\n    },\r\n    getHpFloor(x2) {\r\n        const fl = Math.floor((x2-1)/100);\r\n        const ce = Math.ceil((x2-1)/100);\r\n        const x1 = fl*100+1;\r\n        const x3 = ce*100+1;\r\n        const y1 = miscLoadedValues.hpFloor[fl];\r\n        const y3 = miscLoadedValues.hpFloor[ce];\r\n        if (fl === ce) return y1;\r\n        return Math.round((x2-x1)*(y3-y1)/(x3-x1)+y1);\r\n    },\r\n    getPowFloor(x2) {\r\n        const fl = Math.floor((x2-1)/100);\r\n        const ce = Math.ceil((x2-1)/100);\r\n        const x1 = fl*100+1;\r\n        const x3 = ce*100+1;\r\n        const y1 = miscLoadedValues.powFloor[fl];\r\n        const y3 = miscLoadedValues.powFloor[ce];\r\n        if (fl === ce) return y1;\r\n        return Math.round((x2-x1)*(y3-y1)/(x3-x1)+y1);\r\n    },\r\n    dungeonMatRefresh(matID) {\r\n        this.dungeons.forEach(dungeon => {\r\n            if (dungeon.status !== DungeonStatus.ADVENTURING) return;\r\n            if (FloorManager.floorByID(dungeon.floorID).mat !== matID) return;\r\n            refreshDungeonMatBar(dungeon.id);\r\n        });\r\n    },\r\n    abandonAllDungeons() {\r\n        this.dungeons.forEach(dungeon => {\r\n            dungeon.resetDungeon();\r\n        })\r\n    },\r\n    completeBoss(id) {\r\n        this.bossesBeat.push(id);\r\n        refreshAllOrders();\r\n        refreshAllSales();\r\n    }\r\n};"],"file":"dungeons.js"}