{"version":3,"sources":["../../src/js/dungeons.js"],"names":["DungeonStatus","Object","freeze","EMPTY","ADVENTURING","COLLECT","TurnOrder","heroes","mobs","order","interlace","position","nextNotDead","dead","length","nextPosition","save","mob","splice","uniqueid","Area","props","assign","unlocked","dungeons","id","dungeon","push","some","d","status","find","party","AreaManager","areas","areaView","addArea","area","idToArea","areaID","a","createSave","forEach","loadSave","areaSave","unlockArea","unlock","addDungeon","Dungeon","mobIDs","mob1","mob2","mob3","mob4","maxFloor","floor","floorClear","lastParty","dungeonTime","Party","heroID","mobSave","mobTemplate","MobManager","idToMob","Mob","lvl","difficulty","undefined","t","dungeonWaitTime","DungeonManager","speed","refreshLater","CombatManager","console","log","buffTick","passiveCheck","every","m","nextFloor","isDead","previousFloor","dungeonView","$","getCurrentID","css","nextTurn","refreshTurnOrder","initiateDungeonFloor","BattleLog","refresh","refreshBeatBar","h","inDungeon","hp","maxHP","clear","openTab","initializeSideBarDungeon","dungeonsTabClicked","type","dungeonComplete","Math","max","resetFloor","achievementStats","floorRecord","mobID","generateMob","reset","html","name","refreshSidebarDungeonMats","showDungeonReward","boss","event","formatToUnits","round","hero","enemy","amt","idAmt","dungeonPaid","bossesBeat","partySize","dungeonByID","addTime","dungeonStatus","dungeonID","createDungeon","floorSkip","PartyCreator","lockParty","initializeParty","abandonCurrentDungeon","resetDungeon","abandonAllDungeons","bossCount","bossDung","filter"],"mappings":"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","sourcesContent":["\"use strict\";\r\nconst DungeonStatus = Object.freeze({EMPTY:0,ADVENTURING:1,COLLECT:2});\r\n\r\nclass TurnOrder {\r\n    constructor(heroes,mobs) {\r\n        this.heroes = heroes;\r\n        this.mobs = mobs;\r\n        this.order = interlace(heroes,mobs);\r\n        this.position = 0;\r\n        this.nextNotDead();\r\n    }\r\n    nextNotDead() {\r\n        while (this.order[this.position].dead()) this.position += 1;\r\n    }\r\n    getOrder() {\r\n        return this.order;\r\n    }\r\n    nextTurn() {\r\n        return this.order[this.position];\r\n    }\r\n    nextPosition() {\r\n        this.position += 1;\r\n        if (this.position === this.order.length) this.position = 0;\r\n        if (this.order[this.position].dead()) this.nextPosition();\r\n    }\r\n    createSave() {\r\n        const save = {};\r\n        save.position = this.position;\r\n        return save;\r\n    }\r\n    loadSave(save) {\r\n        this.position = save.position;\r\n    }\r\n    addMob(mob) {\r\n        this.order.splice(this.position+1,0,mob);\r\n    }\r\n    getCurrentID() {\r\n        return this.order[this.position].uniqueid;\r\n    }\r\n}\r\n\r\nclass Area {\r\n    constructor(props) {\r\n        Object.assign(this, props);\r\n        this.unlocked = false;\r\n        this.dungeons = [];\r\n    }\r\n    createSave() {\r\n        const save = {};\r\n        save.id = this.id;\r\n        save.unlocked = this.unlocked;\r\n        return save;\r\n    }\r\n    loadSave(save) {\r\n        this.unlocked = save.unlocked;\r\n    }\r\n    unlock() {\r\n        this.unlocked = true;\r\n    }\r\n    addDungeon(dungeon) {\r\n        this.dungeons.push(dungeon);\r\n    }\r\n    status() {\r\n        if (this.dungeons.some(d => d.status === DungeonStatus.COLLECT)) return DungeonStatus.COLLECT;\r\n        if (this.dungeons.some(d => d.status === DungeonStatus.ADVENTURING)) return DungeonStatus.ADVENTURING;\r\n        return DungeonStatus.EMPTY;\r\n    }\r\n    activeParty() {\r\n        const dungeon = this.dungeons.find(d => d.status === DungeonStatus.ADVENTURING);\r\n        return dungeon.party;\r\n    }\r\n    activeDungeonID() {\r\n        return this.dungeons.find(d => d.status === DungeonStatus.ADVENTURING || d.status === DungeonStatus.COLLECT).id;\r\n    }\r\n}\r\n\r\nconst AreaManager = {\r\n    areas : [],\r\n    areaView : null,\r\n    addArea(area) {\r\n        this.areas.push(area);\r\n    },\r\n    idToArea(areaID) {\r\n        return this.areas.find(a=>a.id === areaID);\r\n    },\r\n    createSave() {\r\n        const save = {};\r\n        save.areas = [];\r\n        this.areas.forEach(area => save.areas.push(area.createSave()));\r\n    },\r\n    loadSave(save) {\r\n        save.areas.forEach(areaSave => {\r\n            const area = this.idToArea(areaSave.id);\r\n            area.loadSave(areaSave);\r\n        });\r\n    },\r\n    unlockArea(areaID) {\r\n        const area = this.idToArea(areaID);\r\n        area.unlock();\r\n    },\r\n    addDungeon(dungeon) {\r\n        const area = this.idToArea(dungeon.area);\r\n        area.addDungeon(dungeon);\r\n    }\r\n}\r\n\r\nclass Dungeon {\r\n    constructor(props) {\r\n        Object.assign(this, props);\r\n        this.party = null;\r\n        this.mobs = [];\r\n        this.mobIDs = [];\r\n        this.mobIDs.push(this.mob1);\r\n        if (this.mob2 !== null) this.mobIDs.push(this.mob2);\r\n        if (this.mob3 !== null) this.mobIDs.push(this.mob3);\r\n        if (this.mob4 !== null) this.mobIDs.push(this.mob4);\r\n        this.maxFloor = 0;\r\n        this.floor = 0;\r\n        this.floorClear = 0;\r\n        this.order = null;\r\n        this.status = DungeonStatus.EMPTY;\r\n        this.lastParty = null;\r\n        this.dungeonTime = 0;\r\n    }\r\n    createSave() {\r\n        const save = {};\r\n        save.id = this.id;\r\n        if (this.party !== null) save.party = this.party.createSave();\r\n        else save.party = null;\r\n        save.mobs = [];\r\n        this.mobs.forEach(mob => {\r\n            save.mobs.push(mob.createSave());\r\n        });\r\n        save.maxFloor = this.maxFloor;\r\n        save.floor = this.floor;\r\n        save.floorClear = this.floorClear;\r\n        if (this.order !== null) save.order = this.order.createSave();\r\n        else save.order = null;\r\n        save.status = this.status;\r\n        save.lastParty = this.lastParty;\r\n        return save;\r\n    }\r\n    loadSave(save) {\r\n        if (save.party !== null) this.party = new Party(save.party.heroID);\r\n        save.mobs.forEach(mobSave => {\r\n            const mobTemplate = MobManager.idToMob(mobSave.id);\r\n            const mob = new Mob(mobSave.lvl, mobTemplate, mobSave.difficulty);\r\n            mob.loadSave(mobSave);\r\n            this.mobs.push(mob);\r\n        });\r\n        if (save.maxFloor !== undefined) this.maxFloor = save.maxFloor;\r\n        if (save.floor !== undefined) this.floor = save.floor;\r\n        if (save.floorClear !== undefined) this.floorClear = save.floorClear;\r\n        if (save.order !== null) {\r\n            this.order = new TurnOrder(this.party.heroes,this.mobs);\r\n            this.order.loadSave(save.order);\r\n        }\r\n        this.status = save.status;\r\n        this.lastParty = save.lastParty;\r\n    }\r\n    addTime(t) {\r\n        //if there's enough time, grab the next guy and do some combat\r\n        if (this.status !== DungeonStatus.ADVENTURING) return;\r\n        this.dungeonTime += t;\r\n        const dungeonWaitTime = DungeonManager.speed;\r\n        const refreshLater = this.dungeonTime >= 1500;\r\n        CombatManager.refreshLater = refreshLater;\r\n        while (this.dungeonTime >= dungeonWaitTime) {\r\n            this.dungeonTime -= dungeonWaitTime;\r\n            //take a turn\r\n            console.log(\"hi\");\r\n            this.buffTick(\"onTurn\");\r\n            this.passiveCheck(\"onTurn\");\r\n            if (this.mobs.every(m=>m.dead())) {\r\n                this.nextFloor(refreshLater);\r\n                return;\r\n            }\r\n            else if (this.party.isDead()) {\r\n                this.previousFloor(refreshLater,true);\r\n                return;\r\n            }\r\n            if (!refreshLater && DungeonManager.dungeonView === this.id) $(`#beatbarFill${this.order.getCurrentID()}`).css('width',\"0%\");\r\n            CombatManager.nextTurn(this);\r\n            this.dungeonTime -= dungeonWaitTime;\r\n            if (!refreshLater && DungeonManager.dungeonView === this.id) refreshTurnOrder(this.id);\r\n            //we repeat this because we need it early for passives, and late for combat\r\n            if (this.mobs.every(m=>m.dead())) {\r\n                this.nextFloor(refreshLater);\r\n            }\r\n            else if (this.party.isDead()) {\r\n                this.previousFloor(refreshLater,true);\r\n            }\r\n        }\r\n        if (refreshLater) {\r\n            initiateDungeonFloor(this.id);\r\n            BattleLog.refresh();\r\n        }\r\n        if (DungeonManager.dungeonView === this.id) refreshBeatBar(this.order.getCurrentID(),this.dungeonTime);\r\n    }\r\n    initializeParty(party) {\r\n        this.party = party;\r\n        this.lastParty = party.heroID;\r\n    }\r\n    resetDungeon() {\r\n        if (this.status !== DungeonStatus.ADVENTURING && this.status !== DungeonStatus.COLLECT) return;\r\n        this.party.heroes.forEach(h=>{\r\n            h.inDungeon = false;\r\n            h.hp = h.maxHP()\r\n        });\r\n        if (DungeonManager.dungeonView === this.id) {\r\n            BattleLog.clear();\r\n            openTab(\"dungeonsTab\");\r\n        }\r\n        initializeSideBarDungeon();\r\n        dungeonsTabClicked();\r\n        this.status = DungeonStatus.EMPTY;\r\n        this.party = null;\r\n        this.order = null;\r\n        this.mobs = [];\r\n        this.floor = 0;\r\n        this.floorClear = 0;\r\n        return;\r\n    }\r\n    previousFloor(refreshLater) {\r\n        if (this.type === \"boss\") return this.dungeonComplete(previousFloor);\r\n        this.floor = Math.max(1,this.floor - 1);\r\n        this.resetFloor(refreshLater);\r\n    }\r\n    nextFloor(refreshLater, previousFloor) {\r\n        if (this.type === \"boss\") return this.dungeonComplete(previousFloor);   \r\n        this.floorClear = this.floor;\r\n        this.maxFloor = Math.max(this.maxFloor,this.floor);\r\n        this.floor += 1;        \r\n        achievementStats.floorRecord(this.id, this.maxFloor);\r\n        this.resetFloor(refreshLater);\r\n    }\r\n    resetFloor(refreshLater) {\r\n        this.mobs = [];\r\n        this.mobIDs.forEach(mobID => {\r\n            const mob = MobManager.generateMob(mobID,this);\r\n            this.mobs.push(mob);\r\n        });\r\n        this.party.reset();\r\n        this.order = new TurnOrder(this.party.heroes,this.mobs);\r\n        if (refreshLater || DungeonManager.dungeonView !== this.id) return;\r\n        initiateDungeonFloor(this.id);\r\n        $(\"#dsb\"+this.id).html(`${this.name} - ${this.floor}`);\r\n        refreshSidebarDungeonMats(this.id);\r\n    }\r\n    dungeonComplete() {\r\n        this.status = DungeonStatus.COLLECT;\r\n        dungeonsTabClicked();\r\n        if (DungeonManager.dungeonView === this.id) showDungeonReward(this.id);\r\n    }\r\n    bossHPStyling() {\r\n        if (this.type !== \"boss\") return \"0 (0%)\";\r\n        const boss = this.mobs.find(m=>m.event === \"boss\")\r\n        return `${formatToUnits(boss.hp,2)} (${Math.round(100*boss.hp/boss.maxHP())+\"%\"})`;\r\n    }\r\n    bossDifficulty() {\r\n        return 0;\r\n        //if (this.type === \"regular\") return 0;\r\n        //const boss = DungeonManager.bossByDungeon(this.id);\r\n        //return MonsterHall.monsterKillCount(boss);\r\n    }\r\n    buffTick(type) {\r\n        this.party.heroes.forEach(hero => {\r\n            hero.buffTick(type);\r\n        })\r\n        this.mobs.forEach(enemy => {\r\n            enemy.buffTick(type);\r\n        })\r\n    }\r\n    passiveCheck(type) {\r\n        this.party.heroes.forEach(hero => {\r\n            hero.passiveCheck(type);\r\n        })\r\n        this.mobs.forEach(enemy => {\r\n            enemy.passiveCheck(type);\r\n        })\r\n    }\r\n    materialGain() {\r\n        const amt = this.floorClear\r\n    }\r\n    getRewards() {\r\n        return new idAmt(\"M201\",1);\r\n    }\r\n}\r\n\r\nconst DungeonManager = {\r\n    dungeons : [],\r\n    dungeonView : null,\r\n    speed : 1500,\r\n    createSave() {\r\n        const save = {};\r\n        save.dungeons = [];\r\n        this.dungeons.forEach(d => {\r\n            save.dungeons.push(d.createSave());\r\n        });\r\n        save.dungeonPaid = this.dungeonPaid;\r\n        save.speed = this.speed;\r\n        save.bossesBeat = this.bossesBeat;\r\n        save.partySize = this.partySize;\r\n        return save;\r\n    },\r\n    addDungeon(dungeon) {\r\n        this.dungeons.push(dungeon);\r\n        AreaManager.addDungeon(dungeon);\r\n    },\r\n    loadSave(save) {\r\n        save.dungeons.forEach(d => {\r\n            const dungeon = DungeonManager.dungeonByID(d.id);\r\n            dungeon.loadSave(d);\r\n        });\r\n        this.speed = save.speed;\r\n        if (typeof save.dungeonPaid !== \"undefined\") this.dungeonPaid = save.dungeonPaid;\r\n        if (typeof save.bossesBeat !== \"undefined\") this.bossesBeat = save.bossesBeat;\r\n        if (typeof save.partySize !== \"undefined\") this.partySize = save.partySize;\r\n    },\r\n    addTime(t) {\r\n        this.dungeons.forEach(dungeon => {\r\n            dungeon.addTime(t);\r\n        });\r\n    },\r\n    dungeonStatus(dungeonID) {\r\n        return this.dungeons.find(d=>d.id===dungeonID).status;\r\n    },\r\n    createDungeon(dungeonID,floorSkip) {\r\n        const party = PartyCreator.lockParty();\r\n        const dungeon = this.dungeonByID(dungeonID);\r\n        dungeon.floor = floorSkip ? dungeon.maxFloor : 1;\r\n        dungeon.status = DungeonStatus.ADVENTURING;\r\n        this.dungeonView = dungeonID;\r\n        dungeon.initializeParty(party);\r\n        dungeon.resetFloor();\r\n        initializeSideBarDungeon();\r\n    },\r\n    dungeonByID(dungeonID) {\r\n        return this.dungeons.find(d => d.id === dungeonID);\r\n    },\r\n    abandonCurrentDungeon() {\r\n        const dungeon = this.dungeonByID(this.dungeonView);\r\n        dungeon.resetDungeon();\r\n    },\r\n    abandonAllDungeons() {\r\n        this.dungeons.forEach(dungeon => {\r\n            dungeon.resetDungeon();\r\n        })\r\n    },\r\n    bossCount() {\r\n        const bossDung = this.dungeons.filter(d => d.type === \"boss\")\r\n        return bossDung.filter(d => d.maxFloor > 0).length;\r\n    }\r\n};"],"file":"dungeons.js"}