{"version":3,"sources":["../../src/js/dungeons.js"],"names":["DungeonStatus","Object","freeze","EMPTY","ADVENTURING","COLLECT","TurnOrder","heroes","mobs","order","interlace","position","nextNotDead","dead","length","nextPosition","save","mob","splice","uniqueid","Area","props","assign","unlocked","dungeons","id","dungeon","push","some","d","status","find","party","AreaManager","areas","areaView","addArea","area","idToArea","areaID","a","createSave","forEach","loadSave","areaSave","unlockArea","unlock","addDungeon","Dungeon","maxFloor","floor","floorClear","lastParty","undefined","Party","heroID","mobSave","mobTemplate","MobManager","idToMob","Mob","lvl","difficulty","t","dungeonTime","dungeonWaitTime","DungeonManager","speed","refreshLater","CombatManager","buffTick","passiveCheck","floorComplete","nextFloor","isDead","dungeonView","$","getCurrentID","css","nextTurn","refreshTurnOrder","initiateDungeonFloor","BattleLog","refresh","refreshBeatBar","h","inDungeon","hp","maxHP","clear","openTab","initializeSideBarDungeon","dungeonsTabClicked","previousFloor","floorCount","type","dungeonComplete","Math","max","achievementStats","floorRecord","generateDungeonFloor","bossDifficulty","reset","html","name","refreshSidebarDungeonMats","showDungeonReward","boss","m","event","formatToUnits","round","bossByDungeon","MonsterHall","monsterKillCount","hero","enemy","amt","dungeonPaid","bossesBeat","partySize","dungeonByID","addTime","dungeonStatus","dungeonID","createDungeon","PartyCreator","lockParty","dungeonCreatingID","beatTotal","progressNextFloor","initializeParty","abandonCurrentDungeon","resetDungeon","abandonAllDungeons","bossCount","bossDung","filter"],"mappings":"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","sourcesContent":["\"use strict\";\nconst DungeonStatus = Object.freeze({EMPTY:0,ADVENTURING:1,COLLECT:2});\n\nclass TurnOrder {\n    constructor(heroes,mobs) {\n        this.heroes = heroes;\n        this.mobs = mobs;\n        this.order = interlace(heroes,mobs);\n        this.position = 0;\n        this.nextNotDead();\n    }\n    nextNotDead() {\n        while (this.order[this.position].dead()) this.position += 1;\n    }\n    getOrder() {\n        return this.order;\n    }\n    nextTurn() {\n        return this.order[this.position];\n    }\n    nextPosition() {\n        this.position += 1;\n        if (this.position === this.order.length) this.position = 0;\n        if (this.order[this.position].dead()) this.nextPosition();\n    }\n    createSave() {\n        const save = {};\n        save.position = this.position;\n        return save;\n    }\n    loadSave(save) {\n        this.position = save.position;\n    }\n    addMob(mob) {\n        this.order.splice(this.position+1,0,mob);\n    }\n    getCurrentID() {\n        return this.order[this.position].uniqueid;\n    }\n}\n\nclass Area {\n    constructor(props) {\n        Object.assign(this, props);\n        this.unlocked = false;\n        this.dungeons = [];\n    }\n    createSave() {\n        const save = {};\n        save.id = this.id;\n        save.unlocked = this.unlocked;\n        return save;\n    }\n    loadSave(save) {\n        this.unlocked = save.unlocked;\n    }\n    unlock() {\n        this.unlocked = true;\n    }\n    addDungeon(dungeon) {\n        this.dungeons.push(dungeon);\n    }\n    status() {\n        if (this.dungeons.some(d => d.status === DungeonStatus.COLLECT)) return DungeonStatus.COLLECT;\n        if (this.dungeons.some(d => d.status === DungeonStatus.ADVENTURING)) return DungeonStatus.ADVENTURING;\n        return DungeonStatus.EMPTY;\n    }\n    activeParty() {\n        const dungeon = this.dungeons.find(d => d.status === DungeonStatus.ADVENTURING);\n        return dungeon.party;\n    }\n    activeDungeonID() {\n        return this.dungeons.find(d => d.status === DungeonStatus.ADVENTURING || d.status === DungeonStatus.COLLECT).id;\n    }\n}\n\nconst AreaManager = {\n    areas : [],\n    areaView : null,\n    addArea(area) {\n        this.areas.push(area);\n    },\n    idToArea(areaID) {\n        return this.areas.find(a=>a.id === areaID);\n    },\n    createSave() {\n        const save = {};\n        save.areas = [];\n        this.areas.forEach(area => save.areas.push(area.createSave()));\n    },\n    loadSave(save) {\n        save.areas.forEach(areaSave => {\n            const area = this.idToArea(areaSave.id);\n            area.loadSave(areaSave);\n        });\n    },\n    unlockArea(areaID) {\n        const area = this.idToArea(areaID);\n        area.unlock();\n    },\n    addDungeon(dungeon) {\n        const area = this.idToArea(dungeon.area);\n        area.addDungeon(dungeon);\n    }\n}\n\nclass Dungeon {\n    constructor(props) {\n        Object.assign(this, props);\n        this.party = null;\n        this.mobs = [];\n        this.maxFloor = 0;\n        this.floor = 0;\n        this.floorClear = 0;\n        this.order = null;\n        this.status = DungeonStatus.EMPTY;\n        this.lastParty = null;\n    }\n    createSave() {\n        const save = {};\n        save.id = this.id;\n        if (save.party !== null && save.party !== undefined) save.party = this.party.createSave();\n        else save.party = null;\n        save.mobs = [];\n        this.mobs.forEach(mob => {\n            save.mobs.push(mob.createSave());\n        });\n        save.maxFloor = this.maxFloor;\n        save.floor = this.floor;\n        if (this.order !== null) save.order = this.order.createSave();\n        else save.order = null;\n        save.status = this.status;\n        save.lastParty = this.lastParty;\n        return save;\n    }\n    loadSave(save) {\n        if (save.party !== null) this.party = new Party(save.party.heroID);\n        save.mobs.forEach(mobSave => {\n            const mobTemplate = MobManager.idToMob(mobSave.id);\n            const mob = new Mob(mobSave.lvl, mobTemplate, mobSave.difficulty);\n            mob.loadSave(mobSave);\n            this.mobs.push(mob);\n        });\n        if (this.maxFloor !== undefined) this.maxFloor = save.maxFloor;\n        if (this.floor !== undefined) this.floor = save.floor;\n        if (save.order !== null) {\n            this.order = new TurnOrder(this.party.heroes,this.mobs);\n            this.order.loadSave(save.order);\n        }\n        this.status = save.status;\n        this.lastParty = save.lastParty;\n    }\n    addTime(t) {\n        //if there's enough time, grab the next guy and do some combat\n        if (this.status !== DungeonStatus.ADVENTURING) return;\n        this.dungeonTime += t;\n        const dungeonWaitTime = DungeonManager.speed;\n        const refreshLater = this.dungeonTime >= 2*dungeonWaitTime;\n        CombatManager.refreshLater = refreshLater;\n        while (this.dungeonTime >= dungeonWaitTime) {\n            //take a turn\n            this.buffTick(\"onTurn\");\n            this.passiveCheck(\"onTurn\");\n            if (this.floorComplete()) {\n                this.nextFloor(refreshLater);\n                this.dungeonTime -= dungeonWaitTime;\n                return;\n            }\n            if (this.party.isDead()) {\n                this.nextFloor(refreshLater,true);\n                this.dungeonTime -= dungeonWaitTime;\n                return;\n            }\n            if (!refreshLater && DungeonManager.dungeonView === this.id) $(`#beatbarFill${this.order.getCurrentID()}`).css('width',\"0%\");\n            CombatManager.nextTurn(this);\n            this.dungeonTime -= dungeonWaitTime;\n            if (!refreshLater && DungeonManager.dungeonView === this.id) refreshTurnOrder(this.id);\n        }\n        if (refreshLater) {\n            initiateDungeonFloor(this.id);\n            BattleLog.refresh();\n        }\n        if (DungeonManager.dungeonView === this.id) refreshBeatBar(this.order.getCurrentID(),this.dungeonTime);\n    }\n    initializeParty(party) {\n        this.party = party;\n        this.lastParty = party.heroID;\n    }\n    resetDungeon() {\n        if (this.status !== DungeonStatus.ADVENTURING && this.status !== DungeonStatus.COLLECT) return;\n        this.party.heroes.forEach(h=>{\n            h.inDungeon = false;\n            h.hp = h.maxHP()\n        });\n        if (DungeonManager.dungeonView === this.id) {\n            BattleLog.clear();\n            openTab(\"dungeonsTab\");\n        }\n        initializeSideBarDungeon();\n        dungeonsTabClicked();\n        this.status = DungeonStatus.EMPTY;\n        this.party = null;\n        this.order = null;\n        this.mobs = [];\n        this.floor = 0;\n        return;\n    }\n    nextFloor(refreshLater, previousFloor) {\n        if (this.floorCount > 0 && this.type === \"boss\") return this.dungeonComplete(previousFloor);\n        if (previousFloor) this.floor = Math.max(1,this.floor - 1);\n        else this.floorCount += 1;\n        this.maxFloor = Math.max(this.maxFloor,this.floor);\n        achievementStats.floorRecord(this.id, this.maxFloor);\n        this.mobs = MobManager.generateDungeonFloor(this.id,this.floor,this.bossDifficulty());\n        this.party.reset();\n        this.order = new TurnOrder(this.party.heroes,this.mobs);\n        if (refreshLater) return;\n        initiateDungeonFloor(this.id);\n        $(\"#dsb\"+this.id).html(`${this.name} - ${this.floorCount}`);\n        refreshSidebarDungeonMats(this.id);\n    }\n    dungeonComplete() {\n        this.status = DungeonStatus.COLLECT;\n        dungeonsTabClicked();\n        if (DungeonManager.dungeonView === this.id) showDungeonReward(this.id);\n    }\n    bossHPStyling() {\n        if (this.type !== \"boss\") return \"0 (0%)\";\n        const boss = this.mobs.find(m=>m.event === \"boss\")\n        return `${formatToUnits(boss.hp,2)} (${Math.round(100*boss.hp/boss.maxHP())+\"%\"})`;\n    }\n    bossDifficulty() {\n        if (this.type === \"regular\") return 0;\n        const boss = DungeonManager.bossByDungeon(this.id);\n        return MonsterHall.monsterKillCount(boss);\n    }\n    buffTick(type) {\n        this.party.heroes.forEach(hero => {\n            hero.buffTick(type);\n        })\n        this.mobs.forEach(enemy => {\n            enemy.buffTick(type);\n        })\n    }\n    passiveCheck(type) {\n        this.party.heroes.forEach(hero => {\n            hero.passiveCheck(type);\n        })\n        this.mobs.forEach(enemy => {\n            enemy.passiveCheck(type);\n        })\n    }\n    materialGain() {\n        const amt = this.floorClear\n    }\n}\n\nconst DungeonManager = {\n    dungeons : [],\n    dungeonView : null,\n    speed : 1500,\n    createSave() {\n        const save = {};\n        save.dungeons = [];\n        this.dungeons.forEach(d => {\n            save.dungeons.push(d.createSave());\n        });\n        save.dungeonPaid = this.dungeonPaid;\n        save.speed = this.speed;\n        save.bossesBeat = this.bossesBeat;\n        save.partySize = this.partySize;\n        return save;\n    },\n    addDungeon(dungeon) {\n        this.dungeons.push(dungeon);\n        AreaManager.addDungeon(dungeon);\n    },\n    loadSave(save) {\n        save.dungeons.forEach(d => {\n            const dungeon = DungeonManager.dungeonByID(d.id);\n            dungeon.loadSave(d);\n        });\n        this.speed = save.speed;\n        if (typeof save.dungeonPaid !== \"undefined\") this.dungeonPaid = save.dungeonPaid;\n        if (typeof save.bossesBeat !== \"undefined\") this.bossesBeat = save.bossesBeat;\n        if (typeof save.partySize !== \"undefined\") this.partySize = save.partySize;\n    },\n    addTime(t) {\n        this.dungeons.forEach(dungeon => {\n            dungeon.addTime(t);\n        });\n    },\n    dungeonStatus(dungeonID) {\n        return this.dungeons.find(d=>d.id===dungeonID).status;\n    },\n    createDungeon(floor) {\n        const party = PartyCreator.lockParty();\n        const dungeon = this.dungeonByID(this.dungeonCreatingID);\n        dungeon.beatTotal = 0;\n        dungeon.floorCount = 0;\n        dungeon.progressNextFloor = true;\n        dungeon.floorCount = floor-1;\n        dungeon.status = DungeonStatus.ADVENTURING;\n        this.dungeonView = this.dungeonCreatingID;\n        dungeon.initializeParty(party);\n        dungeon.nextFloor();\n        initializeSideBarDungeon();\n    },\n    dungeonByID(dungeonID) {\n        return this.dungeons.find(d => d.id === dungeonID);\n    },\n    abandonCurrentDungeon() {\n        const dungeon = this.dungeonByID(this.dungeonView);\n        dungeon.resetDungeon();\n    },\n    abandonAllDungeons() {\n        this.dungeons.forEach(dungeon => {\n            dungeon.resetDungeon();\n        })\n    },\n    bossCount() {\n        const bossDung = this.dungeons.filter(d => d.type === \"boss\")\n        return bossDung.filter(d => d.maxFloor > 0).length;\n    }\n};"],"file":"dungeons.js"}